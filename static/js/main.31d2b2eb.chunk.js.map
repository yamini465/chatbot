{"version":3,"sources":["Review.js","SimpleForm.js","App.js","serviceWorker.js","index.js"],"names":["Review","props","useState","name","gender","age","state","setState","useEffect","steps","style","width","value","defaultProps","undefined","SimpleForm","id","message","trigger","user","options","label","validator","isNaN","component","asMessage","update","end","Component","App","showChat","setShowChat","className","padding","display","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.31d2b2eb.chunk.js","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Review = (props)  => {\r\n  const [state, setState] = useState({ name: '', gender: '', age: ''});\r\n  \r\n  useEffect(() => {\r\n    const { steps } = props;\r\n    const { name, gender, age } = steps;\r\n    setState({ name, gender, age });\r\n  }, [props])\r\n\r\n    const { name, gender, age } = state;\r\n    return (\r\n      <div style={{ width: '100%' }}>\r\n        <h3>Summary</h3>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td>Name</td>\r\n              <td>{name.value}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Gender</td>\r\n              <td>{gender.value}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Age</td>\r\n              <td>{age.value}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n}\r\n\r\nReview.propTypes = {\r\n  steps: PropTypes.object,\r\n};\r\n\r\nReview.defaultProps = {\r\n  steps: undefined,\r\n};\r\n\r\nexport default Review;\r\n","import React, { Component } from 'react';\r\nimport ChatBot from 'react-simple-chatbot';\r\nimport Review from './Review';\r\n\r\nclass SimpleForm extends Component {\r\n    render() {\r\n      return (\r\n        <ChatBot\r\n          steps={[\r\n            {\r\n              id: '1',\r\n              message: 'What is your name?',\r\n              trigger: 'name',\r\n            },\r\n            {\r\n              id: 'name',\r\n              user: true,\r\n              trigger: '3',\r\n            },\r\n            {\r\n              id: '3',\r\n              message: 'Hi {previousValue}! What is your gender?',\r\n              trigger: 'gender',\r\n            },\r\n            {\r\n              id: 'gender',\r\n              options: [\r\n                { value: 'male', label: 'Male', trigger: '5' },\r\n                { value: 'female', label: 'Female', trigger: '5' },\r\n              ],\r\n            },\r\n            {\r\n              id: '5',\r\n              message: 'How old are you?',\r\n              trigger: 'age',\r\n            },\r\n            {\r\n              id: 'age',\r\n              user: true,\r\n              trigger: '7',\r\n              validator: (value) => {\r\n                if (isNaN(value)) {\r\n                  return 'value must be a number';\r\n                } else if (value < 0) {\r\n                  return 'value must be positive';\r\n                } else if (value > 120) {\r\n                  return `${value}? Come on!`;\r\n                }\r\n  \r\n                return true;\r\n              },\r\n            },\r\n            {\r\n              id: '7',\r\n              message: 'Great! Check out your summary',\r\n              trigger: 'review',\r\n            },\r\n            {\r\n              id: 'review',\r\n              component: <Review />,\r\n              asMessage: true,\r\n              trigger: 'update',\r\n            },\r\n            {\r\n              id: 'update',\r\n              message: 'Would you like to update some field?',\r\n              trigger: 'update-question',\r\n            },\r\n            {\r\n              id: 'update-question',\r\n              options: [\r\n                { value: 'yes', label: 'Yes', trigger: 'update-yes' },\r\n                { value: 'no', label: 'No', trigger: 'end-message' },\r\n              ],\r\n            },\r\n            {\r\n              id: 'update-yes',\r\n              message: 'What field would you like to update?',\r\n              trigger: 'update-fields',\r\n            },\r\n            {\r\n              id: 'update-fields',\r\n              options: [\r\n                { value: 'name', label: 'Name', trigger: 'update-name' },\r\n                { value: 'gender', label: 'Gender', trigger: 'update-gender' },\r\n                { value: 'age', label: 'Age', trigger: 'update-age' },\r\n              ],\r\n            },\r\n            {\r\n              id: 'update-name',\r\n              update: 'name',\r\n              trigger: '7',\r\n            },\r\n            {\r\n              id: 'update-gender',\r\n              update: 'gender',\r\n              trigger: '7',\r\n            },\r\n            {\r\n              id: 'update-age',\r\n              update: 'age',\r\n              trigger: '7',\r\n            },\r\n            {\r\n              id: 'end-message',\r\n              message: 'Thanks! Your data was submitted successfully!',\r\n              end: true,\r\n            },\r\n          ]}\r\n        />\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default SimpleForm;","import React, { useState } from 'react';\nimport SimpleForm from './SimpleForm';\nimport './App.css';\n\nconst App = (props) => {\n  let [showChat, setShowChat] = useState(false);\n\n  const startChat = () => { setShowChat(true); }\n  const hideChat = () => { setShowChat(false); }\n\n    return (\n      <>\n      <div className = \"header\">\n        <h2>My Application!!!</h2>\n      </div>\n      <div className = \"main\">\n        <div className =\"nav\">\n          <h3>My Navigation</h3>\n        </div>\n        <div className =\"content\">\n          <div style = {{padding:\"20px\"}}>\n            <h1>CHATBOT</h1>\n            <p>A chatbot is an artificial intelligence (AI) software that can simulate a conversation (or a chat) with a user in natural language through messaging applications, websites, mobile apps or through the telephone</p>\n            <p>Chatbot or bot â€“ is a computer program that simulates a natural human conversation. Users communicate with a chatbot via the chat interface or by voice, like how they would talk to a real person. Chatbots interpret and process user's words or phrases and give an instant pre-set answer. </p>\n          </div>\n        </div>\n      </div>\n      <div className = \"footer\">Footer</div>\n      <div className = \"bot\">\n        <div style ={{display: showChat ? \"\" : \"none\"}}>\n          <SimpleForm></SimpleForm>\n        </div>      \n        {/* <div> {showChat ? <SimpleForm></SimpleForm> : null} </div> */}\n        <div>\n          {!showChat \n            ? <button className=\"btn\" onClick={() => startChat()}>click to chat... </button> \n            : <button className=\"btn\" onClick={() => hideChat()}>click to hide... </button>}\n        </div>\n      </div>      \n      </>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}